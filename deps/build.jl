using BinaryProvider # requires BinaryProvider 0.3.0 or later


if Sys.isapple()
    exit(0)
end

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["librdkafka"], :librdkafka_so),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/dfdx/RDKafka.jl.deps/releases/download/v0.1.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/librdkafka_build.v0.1.0.aarch64-linux-gnu.tar.gz", "f00f7ea4a1dc9837ba19d93e499075c65d2dcb3e7cb1dbbcffb2156fc7d73841"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/librdkafka_build.v0.1.0.aarch64-linux-musl.tar.gz", "c2bf0a1a32ec66ec8bc49f28bc119305d156014d2851860da6dd3becb532cecf"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/librdkafka_build.v0.1.0.arm-linux-musleabihf.tar.gz", "7aeedc6a9831043353f6190f08eba878a11fa55ea0daf5f26cc4edef082ddd6f"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/librdkafka_build.v0.1.0.i686-linux-gnu.tar.gz", "4bf2105e17afec2140211af74b6cf7906a89a113dcd71416b3242ed4d9a9df46"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/librdkafka_build.v0.1.0.i686-linux-musl.tar.gz", "749f059447c6f05811e66892f282427381284caf05a14a8eb26cdd1c7e9e5786"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/librdkafka_build.v0.1.0.powerpc64le-linux-gnu.tar.gz", "d5bcd5e59f07bf981a5fc38b59be5f61600e4fe0d5e3b0ced5efcc4f243e225f"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/librdkafka_build.v0.1.0.x86_64-linux-gnu.tar.gz", "52df31a8d6b4b36553c462dc6599dbf95fb29ce76cb9ce53bb0c9d732ba01fb7"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/librdkafka_build.v0.1.0.x86_64-linux-musl.tar.gz", "2031918db3e7776922d231ee789dc295943617552b796104f64367ff79a7bdc6"),
    FreeBSD(:x86_64) => ("$bin_prefix/librdkafka_build.v0.1.0.x86_64-unknown-freebsd11.1.tar.gz", "56d3f28b392e3b2385bb9845410113666cd291f0ea7388fd2b35ed34b7d58d6f"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
# write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)



# # using ZipFile

# # const LIBRDKAFKA_REPO = "https://github.com/edenhill/librdkafka/"
# const RELEASE_URL = "https://github.com/edenhill/librdkafka/archive/v1.0.0.zip"
# const ZIP_FILE = "librdkafka.zip"
# const SRC_DIR = "librdkafka"

# # skipdir(path) = joinpath(splitpath(path)[2:end]...)

# # function unzip_dir(zipfile, topdir)
# #     reader = ZipFile.Reader(ZIP_FILE)
# #     for f in reader.files
# #         parts = splitpath(f.name)
# #         length(parts) == 1 && continue
# #         parts[1] = topdir  # replace topdir in archive with the provided topdir
# #         path = joinpath(parts...)

# #         mkpath(dirname(path))
# #         open(path, "w") do out
# #             data = read(f)
# #             write(out, data)
# #         end
# #     end
# #     close(reader)
# # end


# # Linux only
# cd(@__DIR__) do
#     # clean up first
#     rm(ZIP_FILE; force=true, recursive=true)
#     rm(SRC_DIR; force=true, recursive=true)
#     # download and unpack ZIP file with library release
#     download(RELEASE_URL, ZIP_FILE)
#     run(`unzip $ZIP_FILE`)
#     mv("librdkafka-1.0.0", SRC_DIR)
#     # build the binary
#     cd(SRC_DIR) do
#         run(`./configure`)
#         run(`make`)
#     end
#     cp("$SRC_DIR/src/librdkafka.so.1", "librdkafka.so"; force=true)
# end
